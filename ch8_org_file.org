* tuperware

** utils

   #+BEGIN_SRC js :tangle yes
     /** utils */
     const print = console.log
   #+END_SRC
** the mighty contaioner

   a container to hold any data

   #+BEGIN_SRC js :tangle yes
     const Container = function(x) {
       this.__value = x
     }
   #+END_SRC


   a func to make a  new container func
   #+BEGIN_SRC js :tangle yes
     Container.of = (x) => {
       return new Container(x)
     }
   #+END_SRC

   add things to a container

   #+BEGIN_SRC js :tangle no
     Container.of(3)
     // => Container(3)

     Container.of('hotdogs')
     // => Container('hotdogs')


     print(Container.of(Container.of({
       name: 'yoda'
     })))
     // => Container(Container({ name: 'yoda' }))

   #+END_SRC

** my first functor

   Once our value, whatever it may be, is in the container, we'll need a
   way to run functions on it.

   #+BEGIN_SRC js :tangle no
     // (a -> b) -> Container a -> Container b
     Container.prototype.map = (f) => {
       return Container.of(f(this.__value))
     }
   #+END_SRC

   non of the following work with oout tewaking
   #+BEGIN_SRC js :tangle yes
     Container.of(2).map((two) => {
       return two + 2
     })

     // Container.of(2).map(function(two) {
     //   return two + 2
     // })

     Container.of('flamethrowers').map((s) => {
       return s.toUpperCase()
     })
     //=> Container("FLAMETHROWERS")

     Container.of('bombs').map(_.concat('away')).map(_.prop('length'))
     //=> Container(10)
   #+END_SRC

   We can work with our value without ever having to leave the
   Container. This is a remarkable thing. Our value in the Container is
   handed to the map function so we can fuss with it and afterward,
   returned to its Container for safe keeping. As a result of never
   leaving the Container, we can continue to map away, running functions
   as we please. We can even change the type as we go along as
   demonstrated in the latter of the three examples.


   Wait a minute, if we keep calling map, it appears to be some sort of
   composition! What mathematical magic is at work here? Well chaps,
   we've just discovered Functors.

   ~A Functor is a type that implements map and obeys some laws~

** schrodingers maybe

   container is basicly the id func from th eprevius chapter
   but well start to look at other funtors / contaier types

   here is one now

   #+BEGIN_SRC js :tangle no
     cons Maybe = (x) => {
       this.__value = x
     }

     Maybe.of = function(x) {
       return new Maybe(x)
     }

     Maybe.prototype.isNothing = () => {
       return (this.__value === null || this.__value === undefined)
     }
   #+END_SRC

   test if nothing, if true give nothing, else run the f func
   addiong the value to the maybe contaier
   #+BEGIN_SRC js :tangle no
     Maybe.prototype.map = (f) => {
       return this.isNothing() ? Maybe.of(null) : Maybe.of(f(this.__value))
     }
   #+END_SRC

   now use the functor
   #+BEGIN_SRC js :tangle no
     Maybe.of('Malkovich Malkovich').map(match(/a/ig))
     // => Maybe(['a', 'a'])

     Maybe.of(null).map(match(/a/ig))
     // => null

     Maybe.of({
       name: 'Boris'
     }).map(_.prop('age')).map(add(10))
     // Maybe(null)

     Maybe.of({
       name: 'Dinah',
       age: 14
     }).map(_.prop('age')).map(add(10))
     // => Maybe(24)
   #+END_SRC

   making it point free The Functor f => tells us that f must be a
   Functor. Not that difficult, but I felt I should mention it.  we
   can carry on with composition per usual and map will work as
   expected.
   #+BEGIN_SRC js :tangle yes
     // map :: Functor f => (a -> b) -> f a -> f b
     const map = curry((f, any_functor_at_all) => {
       return any_functor_at_all.map(f)
     })
   #+END_SRC

** Use cases
   this is were the fun begins

   we tipcly see maybe in funtions that might fail

   #+BEGIN_SRC js :tangle no
     const safeHead = (xs) => {
       return Maybe.of(xs[0])
     }

     const streetName = compose(
       map(_.prop('street')), safeHead, _.prop('addresses'))

     streetName({
       addresses: []
     })

     // Maybe(nill)

     streetName({
       addresses: [{
         street: 'shady ln.',
         number: 4201
       }]
     })
     // maybe('shady ln')

   #+END_SRC

   #+BEGIN_SRC js :tangle no
   #+END_SRC
